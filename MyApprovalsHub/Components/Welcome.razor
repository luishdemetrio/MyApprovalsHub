@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using MyApprovalsHub.Models
@using MyApprovalsHub.Services
@using MyApprovalsHub.ViewModel
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager

@if(isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
		<FluentProgressRing/>
	</div>
}
else
{
     <div class=" page-padding">

        <h5 class="left">Follows your approvals dashboard@(!String.IsNullOrEmpty(userName) ? ", " + userName : "")!</h5>
       
        <div class="welcome page" style="margin-top:40px">

            <div class="column">

                <ApprovalsCard @ref="ConcurApprovalsCard" ApprovalLogoUri="concur.png" IsLoading=true />
               
            </div>

            <div class="column">
                <ApprovalsCard @ref="ServiceNowApprovalsCard" ApprovalLogoUri="servicenow.png"  IsLoading=true />

            </div>

            <div class="column">
                <PeopleSoftApprovals />
            </div>

            <div class="column">
                <UKGApprovals />
            </div>            
            
        </div>

        <FluentDivider ></FluentDivider>
        
        <ApprovalsList @ref=ApprovalsListGrid/>
        
        <p>@errorMessage</p>
    </div>
}

@code {
    string userName;
    string userEmail;
    string errorMessage;
    bool isInTeams;
    bool isLoading = true;


    private ApprovalsCard ConcurApprovalsCard;
    private ApprovalsCard ServiceNowApprovalsCard;

    private ApprovalsList ApprovalsListGrid;


    private WelcomeViewModel _vm = new("luke.wilson@example.com");


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            isInTeams = await MicrosoftTeams.IsInTeams();

            if (isInTeams)
            { 
                var user = await teamsUserCredential.GetUserInfoAsync();
                userName = user.DisplayName;
                userEmail = user.PreferredUserName;
            }
            else
            {
                errorMessage = "Not running in Microsoft Teams.";
            }

            isLoading = false;
            StateHasChanged();            
        }

        _vm.GetServiceNowPendingApprovals(pendingApprovals =>
            {

                ServiceNowApprovalsCard.UpdateApproval(pendingApprovals.Count()).ConfigureAwait(false);

                ApprovalsListGrid.UpdatePendingApprovalList(pendingApprovals).ConfigureAwait(false);

            });


        _vm.GetConcurPendingApprovals(pendingApprovals =>
            {

                ConcurApprovalsCard.UpdateApproval(pendingApprovals.Count()).ConfigureAwait(false);

                ApprovalsListGrid.UpdatePendingApprovalList(pendingApprovals).ConfigureAwait(false);

            });


        ApprovalsListGrid.PendingApprovalListChangedEvent = (List<PendingApproval> items) =>
        {
            ServiceNowApprovalsCard.PendingApprovals = items.Where(p => p.Source == nameof(SourceDescription.ServiceNow)).Count();

            ConcurApprovalsCard.PendingApprovals = items.Where(p => p.Source == nameof(SourceDescription.Concur)).Count();


        };

    }
    
}

