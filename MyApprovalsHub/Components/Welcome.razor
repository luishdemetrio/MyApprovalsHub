@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager

@if(isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
		<FluentProgressRing/>
	</div>
}
else
{

        <div class=" page-padding">

        <h2 class="left">Welcome to the My Approval's Hub@(!String.IsNullOrEmpty(userName) ? ", " + userName : "")!</h2>

       
        <div class="welcome page">

            <div class="column">
                <ConcurApprovals />
            </div>

            <div class="column">
                <ServiceNowApprovals />
            </div>

            <div class="column">
                <PeopleSoftApprovals />
            </div>

            <div class="column">
                <UKGApprovals />
            </div>            
            
        </div>
       
         
       <ApprovalsList />

        
    </div>
}

@code {
    string userName;
    string errorMessage;
    bool isInTeams;
    bool isLoading = true; 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            isInTeams = await MicrosoftTeams.IsInTeams();

            if (isInTeams)
            { 
                var user = await teamsUserCredential.GetUserInfoAsync();
                userName = user.DisplayName;
            }
            else
            {
                errorMessage = "Not running in Microsoft Teams.";
            }

            isLoading = false;
            StateHasChanged();            
        }
    }

    private string GetEnvironmentName()
    {
        return HostEnvironment.IsDevelopment() ? "local environment" : "Azure environment";
    }






}

