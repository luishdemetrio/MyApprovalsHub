@using MyApprovalsHub.Interfaces
@using MyApprovalsHub.Models
@using MyApprovalsHub.Services
@using System.Collections.Concurrent

<div id="similar" style="margin-top: 40px;">
       
    <h5>Pending Approvals</h5>

    <div class="form-floating mb-3" style="margin-top: 20px;width:30%;min-width:300px">
        <input type="text" class="form-control" id="floatingInput" placeholder="Luis Demetrio" @oninput="FilterChanged">
        <label for="floatingInput">Filter by requestor</label>
    </div>

    <table class="table">
        <thead>

        <tr>
            @foreach (var item in SortingColumnsGrid)
            {
                <th scope="col">
                    <div>
                        <button style="border:none;background:none;font-weight:600" @onclick=@(()=>SortColumn(item))>

                            @item.Title
                            @if (item.Title == lastSortColumn?.Title)
                            {
                                @(isAscending ? " ↑" : " ↓")
                            }
                        </button>
                    </div>
                </th>
            }              
        </tr>
        </thead>

        <tbody>
        @foreach (var item in _sortedExpenseGrid)
        {
            <tr>
                <th scope="row"><img src=@item.SourcePhoto height="25" width="25" /></th>
                <td>@item.Number</td>
                <td>@item.Description</td>
                    <td>@item.Date.ToShortDateString()</td>
                <td>@item.Requestor</td>                
                <td>
                    <div>
                            
                           <button type="button" class="btn btn-secondary" @onclick=@(()=>OpenDetailsPane(@item))>Details</button>
                    </div>
                        
                </td>
                <td>
                        <button type="button" class="btn btn-success" @onclick=@(()=>QuickApprove(@item))>👍</button>                  </td>
                <td>
                        <button type="button" class="btn btn-dark" @onclick=@(()=>QuickReject(@item))>❌</button>
                </td>
            </tr>
        }
        </tbody>
        </table>


    <ServiceNowPendingApprovalsDetails @ref="PendingApprovalDetailsPanel" selectedExpense=@selectedExpense DetailPaneIsHidden=@DetailPaneIsHidden />

    <ActionConfirmation @ref="ModalActionConfirmation" ModalHidden=@ConfirmationPaneIsHidden  />
   
</div>


@code{

    public PendingApproval selectedExpense { get; set; }

    private bool isAscending = false;
    public string filterValue = "";

    private ColumnDefinition<PendingApproval>? lastSortColumn = null;

    public List<ColumnDefinition<PendingApproval>> RawColumnsGridApproval = new();
    public List<ColumnDefinition<PendingApproval>> SortingColumnsGrid = new();

    private List<PendingApproval> _sortedExpenseGrid = new();

    private List<PendingApproval> _rawExpenseGrid = new();

    private ServiceNowPendingApprovalsDetails PendingApprovalDetailsPanel;

    private ActionConfirmation ModalActionConfirmation;
    public bool ConfirmationPaneIsHidden { get; set; } = true;

    public bool DetailPaneIsHidden { get; set; } = true;


    public delegate void PendingApprovalListChanged(List<PendingApproval> pendingApprovals);

    public PendingApprovalListChanged PendingApprovalListChangedEvent;


    public async Task UpdatePendingApprovalList(IEnumerable<PendingApproval> pendingApprovals)
    {

        _rawExpenseGrid.RemoveAll(p => p.Source == pendingApprovals.FirstOrDefault().Source);

        await InvokeAsync(() =>
        {
            _rawExpenseGrid.AddRange(pendingApprovals);

            _sortedExpenseGrid = _rawExpenseGrid;

            if (string.IsNullOrEmpty(filterValue))
                ApplyFilterGrid(filterValue);

            DetailPaneIsHidden = true;
            ConfirmationPaneIsHidden = true;
            StateHasChanged();
        });
    }

    protected override void OnInitialized()
    {

        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("Source", x => x.Source));
        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("Number", x => x.Number));
        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("Description", x => x.Description));
        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("Date", x => x.Date));
        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("Requestor", x => x.Requestor));
        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("", x => x.Number));

        _sortedExpenseGrid = _rawExpenseGrid;

        base.OnInitialized();
    }

    private void OpenDetailsPane(PendingApproval expense)
    {
        selectedExpense = expense;
        DetailPaneIsHidden = false;
        ConfirmationPaneIsHidden = true;

        PendingApprovalDetailsPanel.Show(() =>
        {
            //when approved

            DetailPaneIsHidden = true;
            ConfirmationPaneIsHidden = true;
            RemovePendingApprovalFromList(expense);
            //StateHasChanged();
        });
    }

    private void QuickApprove(PendingApproval expense)
    {
        selectedExpense = expense;

        DetailPaneIsHidden = true;
        ConfirmationPaneIsHidden = false;

        ModalActionConfirmation.Approve(expense, () =>
        {

            ConfirmationPaneIsHidden = true;
            DetailPaneIsHidden = true;
            RemovePendingApprovalFromList(expense);
        });

    }


    private void QuickReject(PendingApproval expense)
    {
        selectedExpense = expense;

        DetailPaneIsHidden = true;
        ConfirmationPaneIsHidden = false;

        ModalActionConfirmation.Reject(expense,() =>
        {

            ConfirmationPaneIsHidden = true;
            DetailPaneIsHidden = true;
            RemovePendingApprovalFromList(expense);
        });

    }

    private void RemovePendingApprovalFromList(PendingApproval expense)
    {
        _rawExpenseGrid.Remove(expense);
        _sortedExpenseGrid = _rawExpenseGrid;

        PendingApprovalListChangedEvent?.Invoke(_rawExpenseGrid);

        StateHasChanged();
    }

    private void FilterChanged(ChangeEventArgs args)
    {
        filterValue = args.Value as string;

        ApplyFilterGrid(filterValue);

        ConfirmationPaneIsHidden = true;
        DetailPaneIsHidden = true;
    }

    private void ApplyFilterGrid(string filter)
    {
          if (string.IsNullOrWhiteSpace(filter))
        {
            _sortedExpenseGrid = _rawExpenseGrid;
        }
        else
        {
            _sortedExpenseGrid = _rawExpenseGrid.Where(x => x.Requestor.Contains(filter, StringComparison.CurrentCultureIgnoreCase)).ToList();
        }
        if (lastSortColumn != null)
        {
            _sortedExpenseGrid.Sort(new CustomComparer(lastSortColumn.FieldSelector!, isAscending));
        }
    }

    private void SortColumn(ColumnDefinition<PendingApproval> columnDefinition)
    {

        if (lastSortColumn?.Title == columnDefinition.Title)
        {
            isAscending = !isAscending;
        }
        else
        {
            lastSortColumn = columnDefinition;
            isAscending = true;
        }
        _sortedExpenseGrid.Sort(new CustomComparer(columnDefinition.FieldSelector!, isAscending));
    }

    class CustomComparer : IComparer<PendingApproval>
    {
        Func<PendingApproval, object> _selector;
        bool _isAscending;

        public CustomComparer(Func<PendingApproval, object> selector, bool isAscending)
        {
            _selector = selector;
            _isAscending = isAscending;
        }

        int IComparer<PendingApproval>.Compare(PendingApproval? x, PendingApproval? y)
        {
            if (_selector(x!).GetType().Name == "DateTime")
            {
                var xs = (DateTime)_selector(x!) ;
                var ys = (DateTime)_selector(y!) ;

                if (xs == null || ys == null)
                    return 0;
                return DateTime.Compare(xs, ys) * (_isAscending ? 1 : -1);
            }
            else
            {
                var xs = _selector(x!) as string;
                var ys = _selector(y!) as string;
                if (xs == null || ys == null)
                    return 0;
                return string.Compare(xs, ys) * (_isAscending ? 1 : -1);
            }
        }
    }

   

  
}