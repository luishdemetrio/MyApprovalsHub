@using MyApprovalsHub.Interfaces
@using MyApprovalsHub.Models
@using MyApprovalsHub.Services



<div id="similar" style="margin-top: 40px;">
       
    <h5>Pending Approvals</h5>

    <div class="form-floating mb-3" style="margin-top: 20px;width:30%;">
        <input type="text" class="form-control" id="floatingInput" placeholder="Luis Demetrio" @oninput="FilterChanged">
        <label for="floatingInput">Filter by requestor</label>
    </div>

  @*  <div style="margin-top: 20px;">
   
        <FluentTextField @oninput="FilterChanged" >Filter Requestor</FluentTextField>
    
    </div>*@


    <table class="table">
        <thead>

        <tr>
            @foreach (var item in SortingColumnsGrid)
            {
                <th scope="col">
                    <div>
                        <button style="border:none;background:none;font-weight:600" @onclick=@(()=>SortColumn(item))>

                            @item.Title
                            @if (item.Title == lastSortColumn?.Title)
                            {
                                @(isAscending ? " ↑" : " ↓")
                            }
                        </button>
                    </div>
                </th>
            }              
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _sortedExpenseGrid)
        {
            <tr>
                <th scope="row"><img src=@item.SourcePhoto height="25" width="25" /></th>
                <td>@item.Description</td>
                <td>@item.Requestor</td>
                
                <td>
                    <div>
                        <button type="button" class="btn btn-secondary" @onclick=@(()=>OnOpenModalParameterButtonClick(@item))>Details</button>
                    </div>
                        
                </td>
            </tr>
        }
        </tbody>
        </table>


    @*   <FluentDataGrid id="ApprovalGrid"
                    ColumnDefinitions=SortingColumnsGrid
                    RowsData=_sortedExpenseGrid
                    GridTemplateColumns="1fr 1fr 1fr 1fr 1fr 1fr"
                    style="float:left"
                    >
            <HeaderCellTemplate>       
                @if(!string.IsNullOrEmpty(@context.Title))
                {                
                    <FluentButton style="border:none;background:none" @onclick=@(()=>SortColumn(context)) >

                
                            @context.Title
                            @if (context.Title == lastSortColumn?.Title)
                            {
                                @(isAscending ? " ↑" : " ↓")
                            }
                
                
                    </FluentButton>
            }
            </HeaderCellTemplate>

           <RowItemTemplate>
               <FluentDataGridRow TItem=string RowType="DataGridRowType.Header" >

                <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader" >
                
                    <img src=@context.SourcePhoto height="25" width="25"/>
                    
                </FluentDataGridCell>

                <FluentDataGridCell GridColumn=2 CellType="DataGridCellType.ColumnHeader"  >@context.Description</FluentDataGridCell>
                <FluentDataGridCell GridColumn=3 CellType="DataGridCellType.ColumnHeader">@context.Requestor</FluentDataGridCell>
                <FluentDataGridCell GridColumn=4 CellType="DataGridCellType.ColumnHeader">@context.Amount</FluentDataGridCell>

                <FluentDataGridCell GridColumn=5 CellType="DataGridCellType.ColumnHeader">

                    <FluentButton @onclick=@(()=>OnOpenModalParameterButtonClick(@context))>
                        Details            
                    </FluentButton>
                
                </FluentDataGridCell>
            </FluentDataGridRow>
           
           </RowItemTemplate>
       </FluentDataGrid>*@

    <FluentDialog Hidden="ModalHidden" aria-label="Simple dialog" Modal="true" >

        @if (@selectedExpense != null && @ModalHidden == false)
        {

            <div class="modal-header" style="margin: 20px;">
                <div class="column" style="margin-right:0px; width:30px">
                    @if (!string.IsNullOrEmpty(selectedExpense.SourcePhoto))
                    {
                        <img src="@selectedExpense.SourcePhoto" style="margin-right:0px;width:40px" />
                    }
                </div>
                <div class="row">
                    <h4>@selectedExpense.Description</h4>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="OnCloseModalParameterButtonClick"></button>
   
              </div>

            <div style="margin: 20px;">
                <div>                    
                    <Graph UserEmail=@selectedExpense.Email />

                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col"></th>

                            </tr>
                        </thead>
                         <tbody>
                        <tr>
                            <th scope="row">Report Date:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Date.ToShortDateString()</td>
                        </tr>

                        <tr>
                            <th scope="row">Report Status:</th>
                            <td style="padding-bottom: 10px;">
                                <FluentBadge Circular=true Fill=Fill.Highlight Color=Color.Highlight style="--badge-fill-highlight: #ffd800; --badge-color-highlight: #000">
                                    Pending
                                </FluentBadge>
                            </td>
                        </tr>

                         </tbody>
                    </table>
                 
                

                   
                </div>
            
            </div>

        @*    <div  style="margin-left: 20px;margin-top: 40px;">

                <button type="button" class="btn btn-success">Approve</button>

                <button type="button" class="btn btn-danger"  style="margin-left: 20px">Reject</button>

                <button type="button" class="btn btn-secondary" style="margin-left: 20px">Details</button>

                <button type="button" class="btn btn-dark"  style="margin-left: 20px" @onclick="OnCloseModalParameterButtonClick">Close</button>

                
                
            </div>*@

            <div class="btn-group" role="group" aria-label="Basic radio toggle button group"
                style="margin-left: 20px;margin-top: 40px;">
                <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked>
                <label class="btn btn-outline-success" for="btnradio1">Approve</label>

                <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off">
                <label class="btn btn-outline-danger" for="btnradio2">Reject</label>

                <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off">
                <label class="btn btn-outline-primary" for="btnradio3">Details</label>

                <input type="radio" class="btn-check" name="btnradio" id="btnradio4" autocomplete="off" @onclick="OnCloseModalParameterButtonClick">
                <label class="btn btn-outline-dark" for="btnradio4">Close</label>
            </div>

            
        }
    </FluentDialog>   
   
</div>


@code{

    public PendingApproval selectedExpense { get; set; }

    private bool isAscending = false;
    public string filterValue = "";

    private ColumnDefinition<PendingApproval>? lastSortColumn = null;

    public List<ColumnDefinition<PendingApproval>> RawColumnsGridApproval = new();
    public List<ColumnDefinition<PendingApproval>> SortingColumnsGrid = new();

    private List<PendingApproval> _sortedExpenseGrid = new();

    private List<PendingApproval> _rawExpenseGrid = new();


    protected override void OnInitialized()
    {

        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("Source", x => x.Source));
        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("Description", x => x.Description));
        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("Requestor", x => x.Requestor));
        SortingColumnsGrid.Add(new ColumnDefinition<PendingApproval>("", x => x.Id));

        
        _rawExpenseGrid = ExpenseList.PendingApprovals;

        _sortedExpenseGrid = _rawExpenseGrid;

        base.OnInitialized();
    }

    public bool ModalHidden { get; set; } = true;

    private void OnOpenModalParameterButtonClick(PendingApproval expense)
    {
        selectedExpense = expense;
        ModalHidden = false;
    }

    private void OnCloseModalParameterButtonClick() => ModalHidden = true;

    private void FilterChanged(ChangeEventArgs args)
    {
        var filter = args.Value as string;

        if (string.IsNullOrWhiteSpace(filter))
        {
            _sortedExpenseGrid = _rawExpenseGrid;
        }
        else
        {
            _sortedExpenseGrid = _rawExpenseGrid.Where(x => x.Requestor.Contains(filter, StringComparison.CurrentCultureIgnoreCase)).ToList();
        }
        if (lastSortColumn != null)
        {
            _sortedExpenseGrid.Sort(new CustomComparer(lastSortColumn.FieldSelector!, isAscending));
        }
    }

    private void SortColumn(ColumnDefinition<PendingApproval> columnDefinition)
    {
        if (lastSortColumn?.Title == columnDefinition.Title)
        {
            isAscending = !isAscending;
        }
        else
        {
            lastSortColumn = columnDefinition;
            isAscending = true;
        }
        _sortedExpenseGrid.Sort(new CustomComparer(columnDefinition.FieldSelector!, isAscending));
    }

    class CustomComparer : IComparer<PendingApproval>
    {
        Func<PendingApproval, object> _selector;
        bool _isAscending;

        public CustomComparer(Func<PendingApproval, object> selector, bool isAscending)
        {
            _selector = selector;
            _isAscending = isAscending;
        }

        int IComparer<PendingApproval>.Compare(PendingApproval? x, PendingApproval? y)
        {
            var xs = _selector(x!) as string;
            var ys = _selector(y!) as string;
            if (xs == null || ys == null)
                return 0;
            return string.Compare(xs, ys) * (_isAscending ? 1 : -1);
        }
    }

  
}