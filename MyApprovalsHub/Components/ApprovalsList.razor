


<div id="similar">
                <h4>Pending Approvals</h4>


            @*<FluentDataGrid id="defaultGrid2" RowsData=RowsGridApproval ColumnDefinitions=ColumnsGridApproval GridTemplateColumns="1fr 1fr 1fr" style="float:left"/>*@

       <div>
   
            <FluentTextField @oninput="FilterChanged">Filter Requestor</FluentTextField>
    
       </div>

       <FluentDataGrid id="ApprovalGrid"
                    ColumnDefinitions=SortingColumnsGrid
                    RowsData=SortedRowsGridApproval
                    GridTemplateColumns="1fr 1fr 1fr 1fr 1fr 1fr"
                    style="float:left"
        >
        <HeaderCellTemplate>
       
            @if(!string.IsNullOrEmpty(@context.Title))
            {
                
                <FluentButton @onclick=@(()=>SortColumn(context)) >

                
                            @context.Title
                            @if (context.Title == lastSortColumn?.Title)
                            {
                                @(isAscending ? " ↑" : " ↓")
                            }
                
                
                    </FluentButton>
            }
        </HeaderCellTemplate>
           <RowItemTemplate>
               <FluentDataGridRow TItem=string RowType="DataGridRowType.Header" >

                <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader" >
                
                    <img src=@GetSourceImage(context.Source) height="25" width="25"/>
                    
                </FluentDataGridCell>
                <FluentDataGridCell GridColumn=2 CellType="DataGridCellType.ColumnHeader"  >@context.Description</FluentDataGridCell>
                <FluentDataGridCell GridColumn=3 CellType="DataGridCellType.ColumnHeader">@context.Requestor</FluentDataGridCell>
                <FluentDataGridCell GridColumn=4 CellType="DataGridCellType.ColumnHeader">@context.Amount</FluentDataGridCell>
                <FluentDataGridCell GridColumn=5 CellType="DataGridCellType.ColumnHeader">
                <FluentButton @onclick=@(()=>OnOpenModalParameterButtonClick(@context))>
                    Details            
                    </FluentButton>
                
                </FluentDataGridCell>
            </FluentDataGridRow>
           
           </RowItemTemplate>
       </FluentDataGrid>

    <FluentDialog Hidden="ModalHidden" aria-label="Simple dialog" Modal="true">

        @if (@selectedExpense != null && @ModalHidden == false)
        {
            <div style="margin-left: 20px;">
                <div >
                    <h2>@selectedExpense.Description</h2>
                </div>
                <div >
                    
                    <Graph UserEmail=@selectedExpense.Email />

                    <h4>Report Date:</h4>

                    <h4>Report Status:</h4>

                    <h4>Amount:</h4>
                </div>
            
            </div>

            <div class="row">
                <button @onclick="OnCloseModalParameterButtonClick">Close</button>
            </div>
            
        }

    </FluentDialog>
    
   
</div>


@code{

    public Approval selectedExpense { get; set; }

    private bool isAscending = false;
    public string filterValue = "";
    private ColumnDefinition<Approval>? lastSortColumn = null;

    public List<ColumnDefinition<Approval>> RawColumnsGridApproval = new();
    public List<ColumnDefinition<Approval>> SortingColumnsGrid = new();

    List<Approval> SortedRowsGridApproval = new();

    List<Approval> RawRowsGridApproval = new()
    {
        new Approval(1, "London Sales Conference", "SAP Concur", "Hermione Granger", 1413.43, new DateTime(2022, 09, 02) , "granger@luisdemetrio.com" ),
        new Approval(2, "Internet May 2022", "SAP Concur", "Draco Malfoy" , 100, new DateTime(2022, 09, 10), "malfoy@luisdemetrio.com"),
        new Approval(3, "Internet May 2022", "Service Now", "Harry Potter" , 100, new DateTime(2022, 09, 14), "harry@luisdemetrio.com")
    };

    public record Approval(int Id, string Description, string Source, string Requestor, double Amount, DateTime Date, string Email);


    protected override void OnInitialized()
    {

        SortingColumnsGrid.Add(new ColumnDefinition<Approval>("Source", x => x.Source));
        SortingColumnsGrid.Add(new ColumnDefinition<Approval>("Description", x => x.Description));
        SortingColumnsGrid.Add(new ColumnDefinition<Approval>("Requestor", x => x.Requestor));
        SortingColumnsGrid.Add(new ColumnDefinition<Approval>("Amount", x => x.Amount));
        SortingColumnsGrid.Add(new ColumnDefinition<Approval>("", x => x.Id));

        SortedRowsGridApproval = RawRowsGridApproval;

        base.OnInitialized();
    }

    public bool ModalHidden { get; set; } = true;

    private void OnOpenModalParameterButtonClick(Approval expense)
    {
        selectedExpense = expense;
        ModalHidden = false;
    }

    private void OnCloseModalParameterButtonClick() => ModalHidden = true;

    private void FilterChanged(ChangeEventArgs args)
    {
        var filter = args.Value as string;

        if (string.IsNullOrWhiteSpace(filter))
        {
            SortedRowsGridApproval = RawRowsGridApproval;
        }
        else
        {
            SortedRowsGridApproval = RawRowsGridApproval.Where(x => x.Requestor.Contains(filter, StringComparison.CurrentCultureIgnoreCase)).ToList();
        }
        if (lastSortColumn != null)
        {
            SortedRowsGridApproval.Sort(new CustomComparer(lastSortColumn.FieldSelector!, isAscending));
        }
    }

    private void SortColumn(ColumnDefinition<Approval> columnDefinition)
    {
        if (lastSortColumn?.Title == columnDefinition.Title)
        {
            isAscending = !isAscending;
        }
        else
        {
            lastSortColumn = columnDefinition;
            isAscending = true;
        }
        SortedRowsGridApproval.Sort(new CustomComparer(columnDefinition.FieldSelector!, isAscending));
    }

    class CustomComparer : IComparer<Approval>
    {
        Func<Approval, object> _selector;
        bool _isAscending;

        public CustomComparer(Func<Approval, object> selector, bool isAscending)
        {
            _selector = selector;
            _isAscending = isAscending;
        }

        int IComparer<Approval>.Compare(Approval? x, Approval? y)
        {
            var xs = _selector(x!) as string;
            var ys = _selector(y!) as string;
            if (xs == null || ys == null)
                return 0;
            return string.Compare(xs, ys) * (_isAscending ? 1 : -1);
        }
    }

    private string GetSourceImage(string source)
    {
        string image = string.Empty;

        switch (source)
        {
            case "SAP Concur":
                image = "concur.png";
                break;

            case "Service Now":
                image = "servicenow.png";
                break;

        }

        return image;
    }
}