


<div id="similar">
                <h3>Pending Approvals</h3>


            @*<FluentDataGrid id="defaultGrid2" RowsData=RowsGridApproval ColumnDefinitions=ColumnsGridApproval GridTemplateColumns="1fr 1fr 1fr" style="float:left"/>*@

       <FluentDataGrid id="ApprovalGrid"
                    ColumnDefinitions=ColumnsGridApproval 
                    RowsData=RowsGridApproval
                    GridTemplateColumns="1fr 1fr 1fr 1fr 1fr 1fr"
                    style="float:left">
           <RowItemTemplate>
               <FluentDataGridRow TItem=string RowType="DataGridRowType.Header">
                <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader">@context.Source</FluentDataGridCell>
                <FluentDataGridCell GridColumn=2 CellType="DataGridCellType.ColumnHeader">@context.Description</FluentDataGridCell>
                <FluentDataGridCell GridColumn=3 CellType="DataGridCellType.ColumnHeader">@context.Requester</FluentDataGridCell>
                <FluentDataGridCell GridColumn=4 CellType="DataGridCellType.ColumnHeader">@context.Amount</FluentDataGridCell>
                <FluentDataGridCell GridColumn=5 CellType="DataGridCellType.ColumnHeader">
                <FluentButton @onclick=@(()=>OnOpenModalParameterButtonClick(@context))>
                    Details            
                    </FluentButton>
                
                </FluentDataGridCell>
            </FluentDataGridRow>
           
           </RowItemTemplate>
       </FluentDataGrid>

    <FluentDialog Hidden="ModalHidden" aria-label="Simple dialog" Modal="true">

        @if (@selectedExpense != null && @ModalHidden == false)
        {
            <div style="margin-left: 20px;">
                <div >
                    <h2>@selectedExpense.Description</h2>
                </div>

                

                <div >
                    <Graph UserEmail=@selectedExpense.Email />
                </div>
            
            </div>

            <div class="row">
                <button @onclick="OnCloseModalParameterButtonClick">Close</button>
            </div>
            
             
            
        }

        

    </FluentDialog>
    




   
</div>


@code{

    public Approval selectedExpense { get; set; }
    
    public class Approval
    {
        public int ID { get; set; }
        public DateTime Date { get; set; }
        public string Description { get; set; }
        public string Source { get; set; }
        public string Requester { get; set; }
        public double Amount { get; set; }
        public string Email { get; set; }

        public Approval(int id, string description, string source, string requester, double amount, DateTime date, string email)
        {
            ID = id;
            Description = description;
            Source = source;
            Requester = requester;
            Amount = amount;
            Date = date;
            Email = email;
        }
    }

    public List<ColumnDefinition<Approval>> ColumnsGridApproval = new();

    List<Approval> RowsGridApproval = new()
    {
        new Approval(1, "London Sales Conference", "SAP Concur", "Hermione Granger", 1413.43, new DateTime(2022, 09, 02) , "granger@luisdemetrio.com" ),
        new Approval(2, "Internet May 2022", "SAP Concur", "Draco Malfoy" , 100, new DateTime(2022, 09, 10), "malfoy@luisdemetrio.com")
    };



    protected override void OnInitialized()
    {

        ColumnsGridApproval.Add(new ColumnDefinition<Approval>("Source", x => x.Source));
        ColumnsGridApproval.Add(new ColumnDefinition<Approval>("Description", x => x.Description));
        ColumnsGridApproval.Add(new ColumnDefinition<Approval>("Requester", x => x.Description));
        ColumnsGridApproval.Add(new ColumnDefinition<Approval>("Amount", x => x.Amount));
        ColumnsGridApproval.Add(new ColumnDefinition<Approval>("", x => x.ID));


        base.OnInitialized();
    }

    public bool ModalHidden { get; set; } = true;

    private void OnOpenModalParameterButtonClick(Approval expense)
    {
        selectedExpense = expense;
        ModalHidden = false;
    }

    private void OnCloseModalParameterButtonClick() => ModalHidden = true;
}