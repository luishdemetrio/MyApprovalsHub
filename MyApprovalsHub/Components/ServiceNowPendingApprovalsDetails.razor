@using MyApprovalsHub.Interfaces
@using MyApprovalsHub.Models
@using MyApprovalsHub.Services
@inject IJSRuntime JSRuntime

@using Microsoft.Extensions.Options
@using MyApprovalsHub.Common
@inject IOptionsMonitor<ApprovalsHubOptions> ApprovalsHubConfig;


<FluentDialog Hidden="DetailPaneIsHidden" aria-label="Simple dialog" Modal="true" style="--dialog-height: 540px;">

    @if (@selectedExpense != null && @DetailPaneIsHidden == false)
    {

        <div class="column" style="margin:30px; width:30px">
            @if (!string.IsNullOrEmpty(selectedExpense.SourcePhoto))
            {
                <img src="@selectedExpense.SourcePhoto" style="margin-right:0px;width:40px" />
            }
        </div>

        <div class="modal-header" style="margin: 20px;">

            <div class="row">
                <h5>@selectedExpense.Description</h5>
            </div>
        </div>

        <div style="margin: 10px;">
            <div>
               @* <Graph UserEmail=@selectedExpense.Email  UserName=@selectedExpense.Requestor />*@

                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">Number:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Number</td>
                        </tr>
                        <tr>
                            <th scope="row">Requestor:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Requestor</td>
                        </tr>
                        <tr>
                            <th scope="row">Email:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Email</td>
                        </tr>
                        <tr>
                            <th scope="row">Request Date:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Date.ToShortDateString()</td>
                        </tr>

                        <tr>
                            <th scope="row">Request State:</th>
                            <td style="padding-bottom: 10px;">
                                <FluentBadge Circular=true Fill=Fill.Highlight Color=Color.Highlight  style="--badge-fill-highlight: #ffd800; --badge-color-highlight: #000">
                                    @selectedExpense.State
                                </FluentBadge>
                            </td>
                        </tr>

                        <tr>
                            <th scope="row">Description:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Description</td>
                        </tr>

                        <tr>
                            <th scope="row">Impact:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Impact</td>
                        </tr>

                    </tbody>
                </table>

            </div>

        </div>

        
        

        <div class="btn-group" role="group" aria-label="Basic radio toggle button group"
             style="margin-left: 20px;margin-top: 10px;">

            <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked @onclick="OnApproveClick">
            <label class="btn btn-outline-success" for="btnradio1">Approve</label>

            <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" @onclick="OnRejectionClick">
            <label class="btn btn-outline-danger" for="btnradio2">Reject</label>

            <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off" @onclick=@(()=>OnDetailsClick(selectedExpense.SysId))>
            <label class="btn btn-outline-secondary" for="btnradio3">Details</label>

            <input type="radio" class="btn-check" name="btnradio" id="btnradio4" autocomplete="off" @onclick="OnCloseModalParameterButtonClick">
            <label class="btn btn-outline-dark" for="btnradio4">Close</label>
        </div>

       
    }
</FluentDialog>

<ActionConfirmation @ref="ModalActionConfirmation"  ModalHidden=@ConfirmationPaneIsHidden  />



@code {

    [Parameter]
    public PendingApproval selectedExpense { get; set; }

    [Parameter]
    public bool DetailPaneIsHidden { get; set; } = true;


    private ActionConfirmation ModalActionConfirmation;
    public bool ConfirmationPaneIsHidden { get; set; } = true;



    public delegate void CloseModalParameterButtonClick();

    private CloseModalParameterButtonClick closeModalParameter;

    private string _serviceNowBaseURL;

    
    public void Show(CloseModalParameterButtonClick closeModalParameterButtonClick)
    {

        closeModalParameter = closeModalParameterButtonClick;
        ConfirmationPaneIsHidden = true;

        _serviceNowBaseURL = ApprovalsHubConfig.CurrentValue.ServiceNowBaseUrl;

    }

    private void OnCloseModalParameterButtonClick()
    {
        DetailPaneIsHidden = true;
        ConfirmationPaneIsHidden = true;
    }

    private async void OnDetailsClick(string id)
    {
        try
        {

            await JSRuntime.InvokeAsync<object>("open", $"{_serviceNowBaseURL}/sp?id=form&sys_id={id}&table=change_request", "_blank");
        }
        catch
        {
            
        
        }

        
    }

    private void OnApproveClick()
    {

        ConfirmationPaneIsHidden = false;


        ModalActionConfirmation.Approve(selectedExpense, () =>
        {

            OnCloseModalParameterButtonClick();

            closeModalParameter?.Invoke();
        });

    }

    private void OnRejectionClick()
    {
        
        ConfirmationPaneIsHidden = false;

        
        ModalActionConfirmation.Reject(selectedExpense, () =>
        {

            OnCloseModalParameterButtonClick();

            closeModalParameter?.Invoke();
        });

    }


    private void CommentsChanged(ChangeEventArgs args)
    {
        selectedExpense.Comments = args.Value as string;
    }

   
}
