@using MyApprovalsHub.Interfaces
@using MyApprovalsHub.Models
@using MyApprovalsHub.Services


<FluentDialog Hidden="ModalHidden" aria-label="Simple dialog" Modal="true" style="--dialog-height: 480px;">

     @if (@selectedExpense != null && @ModalHidden == false)
    {

        <div class="column" style="margin:30px; width:30px">
            @if (!string.IsNullOrEmpty(selectedExpense.SourcePhoto))
            {
                <img src="@selectedExpense.SourcePhoto" style="margin-right:0px;width:40px" />
            }
        </div>

        <div class="modal-header" style="margin: 20px;">

            <div class="row">
                <h5>@selectedExpense.Description</h5>
            </div>
        </div>

        <div style="margin: 10px;">
            <div>
               @* <Graph UserEmail=@selectedExpense.Email  UserName=@selectedExpense.Requestor />*@

                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">Requestor:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Requestor</td>
                        </tr>
                        <tr>
                            <th scope="row">Email:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Email</td>
                        </tr>
                        <tr>
                            <th scope="row">Request Date:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Date.ToShortDateString()</td>
                        </tr>

                        <tr>
                            <th scope="row">Request State:</th>
                            <td style="padding-bottom: 10px;">
                                <FluentBadge Circular=true Fill=Fill.Highlight Color=Color.Highlight style="--badge-fill-highlight: #ffd800; --badge-color-highlight: #000">
                                    @selectedExpense.State
                                </FluentBadge>
                            </td>
                        </tr>

                        <tr>
                            <th scope="row">Description:</th>
                            <td style="padding-bottom: 10px;">@selectedExpense.Description</td>
                        </tr>

                    </tbody>
                </table>

            </div>

        </div>


        <div class="btn-group" role="group" aria-label="Basic radio toggle button group"
             style="margin-left: 20px;margin-top: 10px;">

            <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked @onclick="OnApproveClick">
            <label class="btn btn-outline-success" for="btnradio1">Approve</label>

            <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off">
            <label class="btn btn-outline-danger" for="btnradio2">Reject</label>

            <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off" @onclick="OnCloseModalParameterButtonClick">
            <label class="btn btn-outline-dark" for="btnradio3">Close</label>
        </div>

       
    }
</FluentDialog>



<FluentDialog @ref="ModalActionConfirmation" Hidden=@ModalActionConfirmationMode aria-label="Simple dialog" Modal="true" style="--dialog-height: 200px;--dialog-width: 480px;">

    <div style="margin:20px;vertical-align:central;">

        <h5>Confirm @ActionDescription?</h5>

        <div class="form-floating mb-3" style="margin-top: 20px;width:100%;">
            <input type="text" class="form-control" id="floatingInput" @onchange="CommentsChanged">
            <label for="floatingInput">Comments (optional)</label>
        </div>

        <div style="margin-top: 20px;">

            <button type="button" class="btn btn-success" @onclick=OnConfirmApproval>Confirm</button>

            <button type="button" class="btn btn-secondary" style="margin-left: 20px" @onclick=OnCloseModalActionConfirmation>Cancel</button>

        </div>

    </div>

</FluentDialog>



@code {

    [Parameter]
    public PendingApproval selectedExpense { get; set; }

    [Parameter]
    public bool ModalHidden { get; set; } = true;


    private FluentDialog ModalActionConfirmation;
    public bool ModalActionConfirmationMode { get; set; } = true;

    public string ActionDescription { get; set; } 

    //[Parameter]
    //public EventCallback CloseModalParameterButtonClick { get; set; }

    //protected async Task OnCloseModalParameterButtonClick()
    //{
    //    await CloseModalParameterButtonClick.InvokeAsync(null);
    //}

    private void OnCloseModalParameterButtonClick() => ModalHidden = true;

    //private void OnCloseModalActionConfirmation()
    //{
    //    ModalActionConfirmation!.Hide(); 
    //    ModalActionConfirmationHidden = ModalActionConfirmation.Hidden;
    //}

    private void OnDismiss() => ModalHidden = false;

    private void OnApproveClick()
    {
        ActionDescription = "approval";
        ModalActionConfirmation.Show();
        ModalActionConfirmationMode = ModalActionConfirmation.Hidden;
    }

    private void OnConfirmApproval()
    {

        IPendingApprovalService _serviceNow = ServiceNowService.GetInstance();

        if (_serviceNow.Approve(selectedExpense.Id, selectedExpense.Comments))
        {
            OnCloseModalActionConfirmation();
            OnCloseModalParameterButtonClick();
        }

    }
    private void OnCloseModalActionConfirmation()
    {

        ModalActionConfirmation!.Hide();
        ModalActionConfirmationMode = true;
    }

  
    private void CommentsChanged(ChangeEventArgs args)
    {
        selectedExpense.Comments = args.Value as string;
    }
}
