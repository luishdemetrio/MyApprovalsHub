@using System.IO
@using Azure.Core
@using Microsoft.Graph
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential

<div>
    @*<h2>Get the user's profile photo</h2>*@
    @if (NeedConsent)
    {
        <p>Click below to authorize this app to read your profile photo using Microsoft Graph.</p>
        <FluentButton Appearance="Appearance.Accent" Disabled="@IsLoading" @onclick="ConsentAndShow">Authorize</FluentButton>
    }
    @if (IsLoading)
    {
        <ProfileCard IsLoading="true" />
    }
    else if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="error">@ErrorMessage</div>
    }
    else if (Profile != null)
    {
        <ProfileCard IsLoading="false" Profile="@Profile" UserPhotoUri="@UserPhotoUri"  />
    }
    else
    {
        <div>
            <table class="table">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col"></th>

                        </tr>
                    </thead>
                    <tbody>
         <tr>
                            <th scope="row">Requestor:</th>
                        <td style="padding-bottom: 10px;">@UserName</td>
                        </tr>
                        <tr>
                            <th scope="row">Email:</th>
                        <td style="padding-bottom: 10px;">@UserEmail</td>
                        </tr>
                           </tbody>
                </table>

            </div>

    }
    
</div>

@code {
    [Parameter]
    public string ErrorMessage { get; set; }
    [Parameter]
    public string UserEmail { get; set; }
    [Parameter]
    public string UserName { get; set; }

    public bool IsLoading { get; set; }
    public bool NeedConsent { get; set; }
    public User Profile { get; set; }
    public string UserPhotoUri { get; set; }

    private readonly string[] _scope = { "User.Read", "User.Read.All", "Directory.Read.All", "Contacts.Read" };

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        if (await HasPermission(_scope))
        {
            await ShowProfile();
        }
    }

    private async Task ShowProfile()
    {
        IsLoading = true;
        var graph = GetGraphServiceClient();

        if (String.IsNullOrEmpty(UserEmail))
        {
            Profile = await graph.Me.Request().GetAsync();
        }else
        {
            var user = await graph.Users
                .Request()
                .Select(e => new {
                    e.DisplayName,
                    e.Mail
                })
                .Filter($"mail eq '{UserEmail}'")
                .GetAsync() ;

            Profile = user.FirstOrDefault();

        }

        if (await HasPermission(_scope))
        {
            UserPhotoUri = await GetPhotoAsync(graph);
        }
       

        IsLoading = false;
        ErrorMessage = string.Empty;
    }

    private async Task<string> GetPhotoAsync(GraphServiceClient graph)
    {
        string userPhoto = "";

        Stream photoStream;

        try
        {

           

            if (String.IsNullOrEmpty(UserEmail))
            {

                photoStream = await graph.Me.Photo.Content.Request().GetAsync();

            }
            else
            {
                photoStream = await graph.Users[UserEmail].Photo.Content
                                .Request()
                                .GetAsync();
            }
          

            if (photoStream != null)
            {
                // Copy the photo stream to a memory stream
                // to get the bytes out of it
                var memoryStream = new MemoryStream();
                photoStream.CopyTo(memoryStream);
                var photoBytes = memoryStream.ToArray();

                // Generate a data URI for the photo
                userPhoto = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
            }
        }
        catch { /* Unable to get the users photo */ }

        return userPhoto;
    }

    private async Task ConsentAndShow()
    {
        try
        {
            await teamsUserCredential.LoginAsync(_scope);
            NeedConsent = false;
            await ShowProfile();
        }
        catch (ExceptionWithCode e)
        {
            ErrorMessage = e.Message;
        }
    }

    private async Task<bool> HasPermission(string[] scope)
    {
        IsLoading = true;
        try
        {
            await teamsUserCredential.GetTokenAsync(new TokenRequestContext(_scope ), new System.Threading.CancellationToken());
            return true;
        }
        catch (ExceptionWithCode e)
        {
            if (e.Code == ExceptionCode.UiRequiredError)
            {
                NeedConsent = true;
            }
            else
            {
                ErrorMessage = e.Message;
            }

        }
        IsLoading = false;
        return false;
    }

    private GraphServiceClient GetGraphServiceClient()
    {
        var msGraphAuthProvider = new MsGraphAuthProvider(teamsUserCredential, _scope);
        var client = new GraphServiceClient(msGraphAuthProvider);
        return client;
    }

   
}
