@using MyApprovalsHub.Interfaces
@using MyApprovalsHub.Models
@using MyApprovalsHub.Services

@using Microsoft.Extensions.Options
@using MyApprovalsHub.Common
@inject IOptionsMonitor<ApprovalsHubOptions> ApprovalsHubConfig;


@if (ActionDescription != null)
{
    

    <FluentDialog @ref="ModalAction" Hidden=@ModalHidden aria-label="Simple dialog" Modal="true" style="--dialog-height: 200px;--dialog-width: 480px;">

   
            <div style="margin:20px;vertical-align:central;">

                <h5>Confirm @ActionDescription?</h5>

                <div class="form-floating mb-3" style="margin-top: 20px;width:100%;">
                    <input type="text" class="form-control" id="floatingInput" @onchange="CommentChanged" value="@selectedExpense.Comments">
                <label for="floatingInput">Comments (optional)</label>
                </div>

                <div style="margin-top: 20px;">

                @if (ActionDescription == "approval")
                {
                    <button type="button" class="btn btn-success" @onclick=OnConfirm >Confirm</button>
                }
                else
                {
                    <button type="button" class="btn btn-danger" @onclick=OnConfirm>Confirm</button>
                }
                    <button type="button" class="btn btn-secondary" style="margin-left: 20px" @onclick=Hide>Cancel</button>

                </div>

            </div>
   
    </FluentDialog>
}

@code {

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    public PendingApproval selectedExpense { get; set; }

    private string ActionDescription { get; set; }

    private FluentDialog ModalAction;

    public delegate void CloseModalParameterButtonClick();

    private CloseModalParameterButtonClick closeModalParameter;

    private IPendingApprovalService _serviceNow;

    protected override void OnInitialized()
    {
        _serviceNow = new ServiceNowService(ApprovalsHubConfig.CurrentValue);
    }

    private void CommentChanged(ChangeEventArgs args)
    {
        selectedExpense.Comments = args.Value as string;

    }

    public void Approve(PendingApproval expense, CloseModalParameterButtonClick closeModalParameterButtonClick)
    {
        selectedExpense = expense;
        selectedExpense.Comments = string.Empty;
        ActionDescription = "approval";

        closeModalParameter = closeModalParameterButtonClick;

        ModalHidden = false;

        StateHasChanged();
    }

    public void Reject(PendingApproval expense, CloseModalParameterButtonClick closeModalParameterButtonClick)
    {
        selectedExpense = expense;

        selectedExpense.Comments = string.Empty;

        ActionDescription = "rejection";
        
        closeModalParameter = closeModalParameterButtonClick;

        ModalHidden = false;

        StateHasChanged();
    }


    public void Hide()
    {
        ModalHidden = true;
        StateHasChanged();
    }

    public void OnConfirm()
    {

        switch (selectedExpense.Source)
        {
            case nameof(SourceDescription.ServiceNow):
                ServiceNowChangeStatus();
                break;
        }

    }

    private void ServiceNowChangeStatus()
    {
        
        var statusChangedSucceed = (ActionDescription == "approval") ? 
                _serviceNow.Approve(selectedExpense.SysApproval, selectedExpense.Comments) :
                _serviceNow.Reject(selectedExpense.SysApproval, selectedExpense.Comments);


        if (statusChangedSucceed)
        {
            closeModalParameter?.Invoke();
            Hide();
        }
    }

}
