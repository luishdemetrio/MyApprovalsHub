@using MyApprovalsHub.Common.Interfaces
@using MyApprovalsHub.Common.Models
@using MyApprovalsHub.Services

@using Microsoft.Extensions.Options
@using MyApprovalsHub.Common
@inject IOptionsMonitor<ApprovalsHubOptions> ApprovalsHubConfig;
@inject IServiceNowService ServiceNowService;




@if (ActionDescription != null)
{
    
   

    <FluentDialog @ref="ModalAction" Hidden=@ModalHidden aria-label="Simple dialog" Modal="true" style="--dialog-height: 200px;--dialog-width: 480px;">

        <div style="margin:20px;vertical-align:central;">

            
            <h5>Confirm @ActionDescription?</h5>

            <div class="form-floating mb-3" style="margin-top: 20px;width:100%;">
                <input type="text" class="form-control" id="floatingInput" @onchange="CommentChanged" value="@selectedExpense.Comments">
            <label for="floatingInput">Comments (optional)</label>
            </div>

            <div style="margin-top: 20px;">

            @if (ActionDescription == "approval")
            {
                    <button type="button" class="btn btn-success" @onclick=OnConfirm disabled=@btnConfirmDisabled>
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        Confirm
                    </button>
            }
            else
            {
                <button type="button" class="btn btn-danger" @onclick=OnConfirm disabled=@btnConfirmDisabled>
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        Confirm
                </button>
            }
                <button type="button" class="btn btn-secondary" style="margin-left: 20px" @onclick=Hide>Cancel</button>

            </div>

        </div>
            
        
    </FluentDialog>
}

@code {

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    private bool btnConfirmDisabled = false;
    private bool isLoading = false;

    public PendingApproval selectedExpense { get; set; }

    private string ActionDescription { get; set; }

    private FluentDialog ModalAction;

    public delegate void CloseModalParameterButtonClick();

    private CloseModalParameterButtonClick closeModalParameter;

    private void CommentChanged(ChangeEventArgs args)
    {
        selectedExpense.Comments = args.Value as string;

    }

    public void Approve(PendingApproval expense, CloseModalParameterButtonClick closeModalParameterButtonClick)
    {

        isLoading = false;

        selectedExpense = expense;
        selectedExpense.Comments = string.Empty;
        ActionDescription = "approval";

        closeModalParameter = closeModalParameterButtonClick;

        ModalHidden = false;

        StateHasChanged();
    }

    public void Reject(PendingApproval expense, CloseModalParameterButtonClick closeModalParameterButtonClick)
    {

        isLoading = false;
        selectedExpense = expense;

        selectedExpense.Comments = string.Empty;

        ActionDescription = "rejection";

        closeModalParameter = closeModalParameterButtonClick;

        ModalHidden = false;

        StateHasChanged();
    }


    public void Hide()
    {
        ModalHidden = true;
        StateHasChanged();
    }

    public void OnConfirm()
    {

        isLoading = true;
        btnConfirmDisabled = true;
        StateHasChanged();

        switch (selectedExpense.Source)
        {
            case nameof(SourceDescription.ServiceNow):
                ServiceNowChangeStatus();
                break;
        }

    }

    private async void ServiceNowChangeStatus()
    {

        bool statusChangedSucceed = false;

        var t = Task.Run(() =>
                    {
                        statusChangedSucceed = (ActionDescription == "approval") ?
                        ServiceNowService.Approve(selectedExpense) :
                        ServiceNowService.Reject(selectedExpense);

                    });

        await t;

        if (t.IsCompleted && statusChangedSucceed)
        {
            isLoading = false;
            btnConfirmDisabled = false;
            StateHasChanged();
              closeModalParameter?.Invoke();
              Hide();
          }
    
    }

}
